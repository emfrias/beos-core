/**
 *  @file
 *  @copyright defined in eos/LICENSE.txt
 */
#pragma once

#include <eosiolib/time.hpp>
#include <eosiolib/asset.hpp>
#include <eosiolib/eosio.hpp>
#include <eosiolib/singleton.hpp>

#include <beoslib/beos_privileged.hpp>

namespace eosio {

    struct beos_global_state
    {
      uint32_t starting_block_for_initial_witness_election;

      EOSLIB_SERIALIZE( beos_global_state,

      (starting_block_for_initial_witness_election) )
    };

    typedef eosio::singleton<N(beosglobal), beos_global_state> beos_global_state_singleton;

  //This contract gives values of most basic parameters in BEOS.
  class init : public contract
  {
    private:

      beos_global_state            _beos_gstate;
      beos_global_state_singleton  _beos_global;

      void checker( const beos_global_state& state )
      {
        eosio_assert( state.starting_block_for_initial_witness_election > 0, "STARTING_BLOCK_FOR_INITIAL_WITNESS_ELECTION > 0" );
      }

      beos_global_state get_beos_default_parameters()
      {
        beos_global_state dp;

        /*
          STARTING_BLOCK_FOR_INITIAL_WITNESS_ELECTION
          
          Only after this block will votes be tallied for witnesses.
          After this block, ABP witnesses can be voted out and replaced by elected witnesses.
          Set this to 14 days worth of blocks
        */
        dp.starting_block_for_initial_witness_election = ${STARTING_BLOCK_FOR_INITIAL_WITNESS_ELECTION};

        checker( dp );

        return dp;
      }

    public:

      init( account_name self )
      : contract(self),
       _beos_global( _self, _self )
      {
        _beos_gstate = _beos_global.exists() ? _beos_global.get() : get_beos_default_parameters();
      }

      void changeparams( beos_global_state new_params );
      void storeparams(uint32_t dummy);

      inline beos_global_state get_beos_global_state() const;
  };

  inline beos_global_state init::get_beos_global_state() const
  {
    return _beos_gstate;
  }

} /// namespace eosio
